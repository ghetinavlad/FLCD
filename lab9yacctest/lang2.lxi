%{
#include <math.h>
#include <stdio.h>
#include "y.tab.h"
%}
%option noyywrap

INTEGER		(0|([-]?|[+]?)[1-9][0-9]*)
STRING      \"([a-zA-Z0-9 ])*\"
CHARACTER        \'([a-zA-Z0-9])\'
CONST		{STRING}|{CHARACTER}|{INTEGER}
IDENTIFIER 		([a-zA-Z]|_[a-zA-Z])([_a-zA-Z]|[0-9])*

%%

"START"	{printf( "Reserved word: %s\n", yytext ); return START ;}
"EXIT"	{printf( "Reserved word: %s\n", yytext ); return EXIT ;}
"if"    {printf( "Reserved word: %s\n", yytext ); return IF ;}
"else"    {printf( "Reserved word: %s\n", yytext ); return ELSE ;}
"for"    {printf( "Reserved word: %s\n", yytext ); return FOR ;}
"while"    {printf( "Reserved word: %s\n", yytext ); return WHILE ;}
"read"    {printf( "Reserved word: %s\n", yytext ); return READ ;}
"write"    {printf( "Reserved word: %s\n", yytext ); return WRITE ;}
"int"    {printf( "Reserved word: %s\n", yytext ); return INT ;}
"string"    {printf( "Reserved word: %s\n", yytext ); return STRING ;}
"array"    {printf( "Reserved word: %s\n", yytext ); return ARRAY ;}
"const"    {printf( "Reserved word: %s\n", yytext ); return CONST ;}

{IDENTIFIER}	{printf( "Identifier: %s\n", yytext ); return IDENTIFIER ;}

{CONST}	{printf( "Constant: %s\n", yytext ); return CONSTANT ;}

":"	{printf( "Separator: %s\n", yytext ); return COLON ;}
";"	{printf( "Separator: %s\n", yytext ); return SEMI_COLON ;}
","	{printf( "Separator: %s\n", yytext ); return COMA ;}
"."	{printf( "Separator: %s\n", yytext ); return DOT ;}
"("	{printf( "Separator: %s\n", yytext ); return LEFT_ROUND_PARENTHESIS ;}
")"	{printf( "Separator: %s\n", yytext ); return RIGHT_ROUND_PARENTHESIS ;}
"["	{printf( "Separator: %s\n", yytext ); return LEFT_SQUARE_PARENTHESIS ;}
"]"	{printf( "Separator: %s\n", yytext ); return RIGHT_SQUARE_PARENTHESIS ;}
"{"	{printf( "Separator: %s\n", yytext ); return LEFT_BRACKET ;}
"}"	{printf( "Separator: %s\n", yytext ); return RIGHT_BRACKET ;}
"+"	{printf( "Operator: %s\n", yytext ); return PLUS ;}
"-"	{printf( "Operator: %s\n", yytext ); return MINUS ;}
"*"	{printf( "Operator: %s\n", yytext ); return MULTIPLY ;}
"/"	{printf( "Operator: %s\n", yytext ); return DIVISION ;}
"<"	{printf( "Operator: %s\n", yytext ); return LESS_THAN ;}
">"	{printf( "Operator: %s\n", yytext ); return GREATER_THAN ;}
"<="	{printf( "Operator: %s\n", yytext ); return LESS_OR_EQUAL_THAN ;}
">="	{printf( "Operator: %s\n", yytext ); return GREATER_OR_EQUAL_THAN ;}
"!="	{printf( "Operator: %s\n", yytext ); return DIFFERENT ;}
"="	{printf( "Operator: %s\n", yytext ); return ASSIGNMENT ;}
"=="	{printf( "Operator: %s\n", yytext ); return EQUAL ;}
"%"	{printf( "Operator: %s\n", yytext ); return MODULO ;}

"{"[^}\n]*"}"	/* elimina comentarii */ {}

[ \t]+	/* elimina spatii */  	{}

[\n]+   {}

(($|&|[0-9])[a-zA-Z]|_[a-zA-Z])([_a-zA-Z]|[0-9])*  { printf("Error - BAD IDENTIFIER: %s\n", yytext); }

\"([a-zA-Z0-9 ])*   { printf("Error - BAD STRING: %s\n", yytext); }
([a-zA-Z0-9 ])*[""]$   { printf("Error - BAD STRING: %s\n", yytext); }

%%


